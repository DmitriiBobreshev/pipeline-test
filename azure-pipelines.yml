variables:
  - name: System.Debug
    value: true
  - name: Agent.Diagnostic
    value: true
  - name: sometextprobably 
    value: 'fear'
  - name: currentDate
    value:  $[ format('{0:yyyy}{0:MM}{0:dd}', pipeline.startTime) ]
  - name: skipScanDir
    value: true 

# resources:
#   repositories:
#   - repository: tgBot
#     type: github
#     name: DmyBor/tgBot
#     endpoint: test-gh
#   - repository: playground
#     type: git
#     name: playground/playground
#   - repository: bitbucket
#     type: bitbucket
#     name: bobreshevd/test
#     endpoint: DmyBor


pool: #Default 
  vmImage: windows-latest

#Run pipelines that use docker containers to build Ensure that Agent works with containers in the right way
# container: ubuntu:20.04

steps:

  - powershell: |
      [string]$version = "8.0.107"   # Default .NET version
      [string]$installDir = "$(Agent.ToolsDirectory)/dotnet"  # Default installation directory
      # URL for the dotnet-install.ps1 script
      $scriptUrl = "https://dotnet.microsoft.com/download/dotnet/scripts/v1/dotnet-install.ps1"
      $scriptPath = "$(Agent.TempDirectory)\dotnet-install.ps1"
      # Download dotnet-install.ps1
      Invoke-WebRequest -Uri $scriptUrl -OutFile "$scriptPath"
      # Execute the script to install the specified version and installation directory
      & $scriptPath -Version $version -InstallDir $installDir -Verbose
      echo "$version" >"$(Agent.ToolsDirectory)/dotnet/sdk/${version}.complete"
      ls $install_dir
      echo '======'
      ls "$(Agent.ToolsDirectory)/dotnet/sdk/"
      dotnet --list-sdks

  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: "8.0.107"
  # - checkout: self
  #   retryCountOnTaskFailure: 3
  #   fetchDepth: 1
  #   displayName: "Checkout self"

  # #Check that Git functions works Ensure that user will be able to checkout sources to build it with ADO from Git repos (GitHub, private git repos)
  # - checkout: tgBot
  #   retryCountOnTaskFailure: 1
  #   displayName: "Checkout github"

  # #Check that the TFS functions work Ensure that user will be able to checkout sources to build it with ADO from TFS repos
  # - checkout: playground
  #   retryCountOnTaskFailure: 1
  #   displayName: "Checkout azure"
  
  # #Check BitBucket integration Ensure that user will be able to checkout sources from BitBucket server
  # - checkout: bitbucket
  #   retryCountOnTaskFailure: 1
  #   displayName: "Checkout bitbucket"

  # #Run pipeline which executes PowerShell script Ensure that commands will be executed on the target ADO machine
  # - pwsh: echo "Test PowerShell from host"
  #   displayName: "PowerShell script from host"
  #   target: host

  # #Run pipeline which executes a shell script Ensure that shell will be executed on the target ADO machine
  # - script: echo "Hello from script"
  #   displayName: "Shell script"

  # #Run pipeline which publishes test results Ensure that test results & coverage data are visible in the ADO portal
  # - task: PublishCodeCoverageResults@2
  #   displayName: Publish cobertura report
  #   inputs:
  #     summaryFileLocation: $(Build.Repository.LocalPath)/pipeline-test/src/publish-code-coverage-results/coberturaReport/coverage.xml
  #     failIfCoverageEmpty: true
  #   env:
  #     DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: 1

  # #Run pipeline and check that artifacts are published Ensure that as a result, users will be able to publish artifacts
  # - task: PublishPipelineArtifact@1
  #   displayName: Publish pipeline artifact
  #   inputs:
  #     targetPath: $(Build.Repository.LocalPath)/pipeline-test/templates
  #     artifact: nested-folders-1
  #     publishLocation: pipeline