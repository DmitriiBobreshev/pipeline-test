jobs:
# - job:
#   displayName: 'Install temporary keychain certificate'
#   steps:
#   - task: InstallAppleCertificate@2
#     inputs:
#       certSecureFile: $(certificateFileName)
#       certPwd: $(certificatePassword)
#       keychain: temp
#     retryCountOnTaskFailure: 3
#   - task: Bash@3
#     inputs:
#       filePath: src/install-apple-certificate/detectInstalledCertificate.sh
#       failOnStderr: true

# - job:
#   displayName: 'Install temporary keychain certificate with keychain password'
#   steps:
#   - task: InstallAppleCertificate@2
#     inputs:
#       certSecureFile: $(certificateFileName)
#       certPwd: $(certificatePassword)
#       keychain: temp
#       keychainPassword: $(keychainPassword)
#     retryCountOnTaskFailure: 3
#   - task: Bash@3
#     inputs:
#       filePath: src/install-apple-certificate/detectInstalledCertificate.sh
#       failOnStderr: true

# - job:
#   displayName: 'Install custom keychain certificate'
#   steps:
#   - task: InstallAppleCertificate@2
#     inputs:
#       certSecureFile: $(certificateFileName)
#       certPwd: $(certificatePassword)
#       keychain: custom
#       keychainPassword: $(keychainPassword)
#       customKeychainPath: 'keychain1/'
#     retryCountOnTaskFailure: 3
#   - task: Bash@3
#     inputs:
#       filePath: src/install-apple-certificate/detectInstalledCertificate.sh
#       failOnStderr: true

# - job:
#   displayName: 'Install custom keychain certificate; delete certificate after'
#   steps:
#   - task: InstallAppleCertificate@2
#     inputs:
#       certSecureFile: $(certificateFileName)
#       certPwd: $(certificatePassword)
#       keychain: custom
#       keychainPassword: $(keychainPassword)
#       customKeychainPath: 'keychain2/'
#       deleteCert: true
#     retryCountOnTaskFailure: 3
#   - task: Bash@3
#     inputs:
#       filePath: src/install-apple-certificate/detectInstalledCertificate.sh
#       failOnStderr: true

# - job:
#   displayName: 'Install custom keychain certificate; delete certificate and keychain after'
#   steps:
#   - task: InstallAppleCertificate@2
#     inputs:
#       certSecureFile: $(certificateFileName)
#       certPwd: $(certificatePassword)
#       keychain: custom
#       keychainPassword: $(keychainPassword)
#       customKeychainPath: 'keychain3/'
#       deleteCert: true
#       deleteCustomKeychain: true
#     retryCountOnTaskFailure: 3
#   - task: Bash@3
#     inputs:
#       filePath: src/install-apple-certificate/detectInstalledCertificate.sh
#       failOnStderr: true

- job:
  timeoutInMinutes: 5
  displayName: 'Install custom keychain certificate with signing identity'
  steps:
  - task: InstallAppleCertificate@2
    displayName: 'Install Key for Libssl'
    continueOnError: true # set warning instead of error
    inputs:
      certSecureFile: $(certificateFileName)
      certPwd: $(certificatePassword)
      keychain: custom
      keychainPassword: $(keychainPassword)
      customKeychainPath: 'keychain4/'
      signingIdentity: 'Some signing identity'
      deleteCustomKeychain: true
      deleteCert: true
      opensslPkcsArgs: '-legacy' # we don't need to delete keychain or certificate here because the previous task will handle it
  - task: InstallAppleCertificate@2
    name: setOutput
    displayName: 'Install Key for openssl'
    condition: in(variables['Agent.JobStatus'], 'Failed', 'SucceededWithIssues') # run if only the task without argument failed. we assumed that we're working with openssl
    inputs:
      certSecureFile: $(certificateFileName)
      certPwd: $(certificatePassword)
      keychain: custom
      keychainPassword: $(keychainPassword)
      customKeychainPath: 'keychain4/'
      signingIdentity: 'Some signing identity'
      opensslPkcsArgs: '-legacy' # we don't need to delete keychain or certificate here because the previous task will handle it
  - task: Bash@3
    condition: succeeded() # run if one of the task were succeeded 
    inputs:
      filePath: src/install-apple-certificate/detectInstalledCertificate.sh
      failOnStderr: true
  - script: security delete-keychain $(APPLE_CERTIFICATE_KEYCHAIN)
